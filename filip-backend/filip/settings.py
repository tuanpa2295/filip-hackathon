"""
Django settings for filip project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from urllib.parse import quote_plus

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(DEBUG=(bool, False))
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-&m!93!jw!j62-oo-y^9*_t)3()eu#1vt6*ph(xr1kt2v1kcm11"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

OPENAI_API_KEY: str = env("OPENAI_API_KEY")  # type: ignore
OPENAI_EMBED_API_KEY: str = env("OPENAI_EMBED_API_KEY")

# Azure OpenAI Configuration
AZURE_OPENAI_EMBEDDING_API_KEY: str = env("AZURE_OPENAI_EMBEDDING_API_KEY", default="")
AZURE_OPENAI_CHAT_API_KEY: str = env("AZURE_OPENAI_CHAT_API_KEY", default="")
AZURE_OPENAI_ENDPOINT: str = env("AZURE_OPENAI_ENDPOINT", default="")
AZURE_OPENAI_API_VERSION: str = env("AZURE_OPENAI_API_VERSION", default="2024-02-15-preview")
AZURE_OPENAI_CHAT_MODEL: str = env("AZURE_OPENAI_CHAT_MODEL", default="")
AZURE_OPENAI_EMBEDDING_MODEL: str = env("AZURE_OPENAI_EMBEDDING_MODEL", default="")

ALLOWED_HOSTS = [
    "127.0.0.1",
    "34.50.85.140",
    "localhost",
    "reform-hackaithon.fpt.healthcare",
]

CSRF_TRUSTED_ORIGINS = ["https://reform-hackaithon.fpt.healthcare"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "api",
    "pgvector.django",
    "drf_spectacular",
]

CORS_ALLOWED_ORIGINS = ["http://localhost:5173", "https://ghc-filip.web.app"]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "filip.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "filip.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

POSTGRES_DB: str = env("POSTGRES_DB", default="filip")  # type: ignore
POSTGRES_USER: str = env("POSTGRES_USER", default="postgres")  # type: ignore
POSTGRES_PASSWORD: str = env("POSTGRES_PASSWORD", default="postgres")  # type: ignore
POSTGRES_HOST: str = env("POSTGRES_HOST", default="localhost")  # type: ignore
POSTGRES_PORT: str = env("POSTGRES_PORT", default="5432")  # type: ignore

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": POSTGRES_DB,
        "USER": POSTGRES_USER,
        "PASSWORD": POSTGRES_PASSWORD,
        "HOST": POSTGRES_HOST,
        "PORT": POSTGRES_PORT,
    }
}

PGVECTOR_CONNECTION = f"postgresql+psycopg2://{POSTGRES_USER}:{quote_plus(POSTGRES_PASSWORD)}@{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DB}"


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = BASE_DIR / "static"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Test deploy backend 4

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "FILIP API",
    "DESCRIPTION": "Recommend courses based on analyzed users skills and levels.",
    "VERSION": "1.0.0",
}
